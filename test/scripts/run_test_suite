#!/usr/bin/env bash

set -e

known_configurations=(
    debian-clang:{testing,unstable}
    debian-gcc10:{testing,unstable}

    ubuntu-clang:{eoan,focal,devel}
    ubuntu-gcc10:{focal,devel}

    fedora-clang:{31,32,rawhide}
    fedora-gcc:{32,rawhide}
)

tmpdir=$(mktemp -d)

function cleanup() {
    rm -rf ${tmpdir}
}
trap cleanup EXIT

function print_help() {
    echo "### Valid flags are:"
    echo "### -d/--distribution distro:release - only run matching configurations (both distro and release are patterns)"
    echo "### -t/--testcase testcase - only run matching testcases (testcase is a pattern)"
    echo "### -f/--ignore-fatal - don't interrupt a test flow for a configuration after encountering fatal failure"
    echo "### -p/--no-pull - do not pass --pull to docker build (useful when offline)"
}

IGNORE_FATAL=0
DOCKER_BUILD_PULL="--pull"

while [[ $# -gt 0 ]]
do
    case "$1" in
        -d|--distribution)
            shift
            IFS=':' read DISTRO RELEASE <<<$1
            echo "### Requested configuration: distribution: ${DISTRO}, release: ${RELEASE}"
            shift
            ;;

        -t|--testcase)
            shift
            TESTCASE=$1
            echo "### Requested testcase pattern: ${TESTCASE}"
            shift
            ;;

        -f|--ignore-fatal)
            shift
            IGNORE_FATAL=1
            echo "### Ignoring fatal failures"
            ;;

        -p|--no-pull)
            shift
            DOCKER_BUILD_PULL=
            echo "### Avoiding pulling base image updates in docker build"
            ;;

        -h|--help)
            print_help
            exit 0
            ;;

        *)
            echo "### Unknown flag: $1"
            print_help
            exit 1
            ;;
    esac
done

function should_skip() {
    [[ -n "$1" ]] && [[ "$2" != $1 ]]
    return $?
}

cd /nonsense
rm -f ${tmpdir}/results

for configuration in ${known_configurations[@]}
do
    IFS=':' read distro release <<<${configuration}

    if should_skip "${DISTRO}" "${distro}" || should_skip "${RELEASE}" "${release}"
    then
        continue
    fi

    echo
    echo "### $(date) ### ${configuration}: build"

    rm -rf ./cache
    sudo mkdir -p /cache/${configuration}
    sudo chown ${USER}:${USER} /cache/${configuration}
    cp -a /cache/${configuration} ./cache

    if ! sudo docker build ${DOCKER_BUILD_PULL} \
        --build-arg=RELEASE=${release} \
        -f test/docker/${distro}.Dockerfile \
        --tag nonsense/${configuration} .
    then
        echo "### $(date) ### ${configuration}: build failure" | tee -a ${tmpdir}/results
        continue
    fi

    sudo docker run --rm \
        --mount type=bind,source=/cache/${configuration},destination=/host-cache \
        nonsense/${configuration} \
        cp -a /nonsense/cache/. /host-cache
    CCACHE_DIR=/cache/${configuration} ccache --cleanup

    for test in $(find test/suite -name "*.test" | sed 's:^test/suite/::' | sort -n)
    do
        if should_skip "${TESTCASE}" "${test}"
        then
            continue
        fi

        echo
        echo "### $(date) ### ${configuration}: ${test}: running..."

        fatal=0
        flags=
        if [[ -f test/suite/${test}.setup ]]
        then
            flags=$(test/suite/${test}.setup pre ${tmpdir})
        fi

        mkdir -p "/cache/${configuration}"
        container=$(sudo docker run --rm -d \
            --privileged \
            --tmpfs /run \
            --tmpfs /run/lock \
            --tmpfs /tmp \
            -v /sys/fs/cgroup:/sys/fs/cgroup \
            ${flags} \
            nonsense/${configuration} systemd)

        # allow a few seconds for dbus to stand up (otherwise random failures would accur not exactly rarely)
        # but only if it is not up at the point of doing docker exec
        # and then use it to wait for the systemd inside the container to finish initializing
        # and then check the status
        if ! sudo docker exec ${container} bash -e -c '
                i=3; if [[ "$i" -ne 0 ]] && ! pgrep dbus-daemon | grep "" -q; then sleep 1; i=$((i-1)); fi
                systemctl is-system-running --wait && systemctl status
            ' >/dev/null
        then
            echo "### $(date) ### ${configuration}: ${test}: setup failure" | tee -a ${tmpdir}/results
        elif sudo docker exec ${container} bash -c "
                bash -ex /nonsense/test/suite/${test} 2>&1 \
                    || {
                        printf '\nNonsense services status:\n'
                        systemctl status 'nonsense*'

                        printf '\nNonsense journal entries:\n'
                        journalctl -u 'nonsense*'

                        false
                    }
            " >${tmpdir}/log
        then
            echo "### $(date) ### ${configuration}: ${test}: success"
        else
            cat ${tmpdir}/log
            if [[ -f test/suite/${test}.fatal ]]
            then
                echo "### $(date) ### ${configuration}: ${test}: fatal failure" | tee -a ${tmpdir}/results
                fatal=1
            else
                echo "### $(date) ### ${configuration}: ${test}: failure" | tee -a ${tmpdir}/results
            fi
        fi
        sudo docker kill ${container} >/dev/null

        if [[ -f test/suite/${test}.setup ]]
        then
            test/suite/${test}.setup post ${tmpdir}
        fi

        if [[ "${IGNORE_FATAL}" -eq 0 ]] && [[ "${fatal}" -eq 1 ]]
        then
            break
        fi
    done
done

sudo docker system prune -f

if [[ -f ${tmpdir}/results ]]
then
    echo
    echo "### Failures:"
    cat ${tmpdir}/results

    exit 1
fi

